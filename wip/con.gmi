# con - a fantasy handheld
CON (not a fantasy CONsole) is not a fantasy console. it is a fantasy handheld.

# specs
128x64 screen
64kb cartridge capacity
16 color customizable palette
4 mb of program memory
customizable instruments/sfx/music
6 buttons available to games (4-way dpad, A, B) and 1 power button (which also functions as a menu button)
runs on high level lua-like 8-bit speed throttling VM
auto throttles fps based on cpu load
1 controller but built in link-cable support that can connect to 1 other device.

# inspiration
- arduboy - screen size, separate button dpad, hobby community, no menu botton
- playdate - api, quality of games, actual similar hardware
- pico-8 - 16 colors, ease of creating a cartridge, api, embedding cartridge png file
- picotron - customizable instruments, customizable tools
- uxn - 64kb understandable VM with clean divisions

# goal
CON is a fantasy handheld with some design goals from the start:
- it should be impossible for a developer to make a con game that cannot run on a handheld
- 2 different cartridge formats. game carts and system carts. 1 system cart and 1 game cart can be loaded at the same time on a handheld.
- emulator should be cross platform: browsers/arm/m1/32bit/64bit/linux/windows/mac. 1 command exports to every platform immediately
- games have no internet access, but can do link cable support. the emulator would have a way to boot up multiple handhelds with multiple screens.
- developed in zig for tiny executable size and max speed.

# differences from pico-8
CON is designed to have a limited API to enforce constraints on games.
- Pico8 can chain carts together to have a multicart game. CON cannot do that by design.
  - No multicarts enforces you to keep a smaller game, or encourages you to do crazy-cool compression stuff.
  - Con games would be larger than pico8 games however because it has twice as much space as pico-8.
- Pico8 allows you to use a mouse/keyboard in your game. CON does not.
  - Some pico8 games are unplayable on handhelds, because of keyboard/mouse. All CON games are playable on handhelds since there is no keyboard/mouse support.
  - There may be keyboard/mouse support in system cartridges, so you can use it while developing your game.

CON also takes care of some things for games:
- The power/menu button swaps back to the system cartridge with options for a pause menu somehow. This way, games don't have to implement a custom pause menu, the system defines the pause menu. And they can't unless they want to sacrifice A/B for a pause menu.

# a real handheld
some ideas for a real handheld:
- bluetooth could be used for link cable
- nfc chip & reader: for initiating the bluetooth connection
- A/B, D-PAD, MENU buttons

there could be an nfc reader on the top of the back side of the device. then an nfc chip at the bottom of the back of the device.

if you touch two CONs together, back to back and flipped upsidedown, they simutaneously read the other nfc chip, both turn on bluetooth (it should be off normally to save power) and share a bluetooth connection. you can now play a 2 player game together.

handhelds could be in 16 color greyscale or have a color screen. handheld system cartridges could connect to the internet, games cannot connect to the internet.

# colors
a single byte that modifies a palette color could work something like this:
- 5 bits to modify hue (0-31, 0=redish, 16=turquosish, 31=redish. full hue spectrum like any normal hsv color picker)
- 3 bits to modify saturation. 0-7 (0 is 0 on a normal hsv selector. 7 is 100 on a normal hsv selector)
- when saturation is 0, the hue doesn't matter. so the hue can be used to represent a slight alteration to the value shade. changing the value from -16 to +15. (32 possible slight shade of grey variants)

a game cannot change its palette mid-game. this is done so game designers don't have to think too much about palette mid-game and prevent anyone from making a game that alternates between 2 colors every frame trying to get weird extra colors.

low-rez jam shows that games can look good with 16 colors and a small screen size.

# cartridge
in CON, there are 2 types of cartridges. system cartridges and game cartridges.

both system and game cartridges are a 64kb file. the file has code, gfx, sfx, music, etc.

game cartridges are downloadable from the internet and bootable from a system cartridge.
the system cartridge is what the vm boots into. you have to manually replace this file if you don't want the default system.

system cartridges and game cartridges have the same format. the main difference is that system cartridges have more functions available to it in the api.

the OS system cartridge (the one that CON booted in from) can boot other system cartridges. non-OS system cartridges cannot boot other system cartridges or games. only the OS system cartridge can boot games. (this could change I guess)

after the initial boot screen (think the gameboy/gamecube intro before you play the game), CON boots straight into a specific system cartridge. so to change the default operating system, you can just replace the system cartridge that came with the console.

# framerate
games run at 64 frames per 1.066 seconds. and can drop down to 32, 16, 8, 4, 2, 1, and 0. framerate is set per cartridge. framerate drops end up calling update multiple times for a draw.

a second in con is 1.066 seconds in real life. keeping the framerate a power of 2 fits with the general binary/hex theme of the console.

# api
there are no namespaces or importing required. the entire api is readily available.

every api function should be short, but also start with an underscore.

system cartridges have the same api as game cartridges, but more things. api isn't fleshed out, but some example functions that could be available in the system cartridge, but not game cart are:
- _change_palette(): be able to change the palette on the fly for games not running on a handheld, this lets someone create their own palette-picking tool in the system.
- _keyboard_press(): get a keyboard press not on the gamepad. could be used to create a code editor.
- _mouse(): return x, y of mouse coordinates (0 to 127). can be used in a sprite editor.
- _curl(): get a resource/cartridge from online?

some api functions that could be available to games (and system carts of course):
- _init(), _loop(), _draw(): these would be overwritten by the developer, called every frame, the game loop.
- _circ(filled?): draw a circ
- _rect(filled?): draw a rect
- _sfx(): play a sfx
- _code(): compile a string into lua byte code & load it in. returns nil if successful. returns error text if not as a string. this would be a slower function, so a person wouldn't want to call it every frame.

# code format
Ideas are to include source code. Or compile into VM instructions for you. Or maybe both could be supported. If compiled, a good decompiler should be supported. Problem with source code is that developers start wasting a lot of time trying to minify and stuff.

string data could also be interened/compressed maybe.

# number format
numbers are the same as in pico8. they are 4-byte fixed point. 2 bytes for integer part. 2 bytes for fraction part. you don't need more than that for the screen size.

sin/cos work like pico8. from 0 to 1. That's so much easier to work with than having PI in there.

numbers have no suprises when they are fixed point. you don't need large numbers for tiny games. and they are fun to work with like this.

# multiplayer
CON is a 1-player console that can connect to 1 other CON device, which makes it 2 player.

# cartridge format
here's the idea so far:

0x0000: label image (32x32 2-bit color label image. a system cartridge could use this label image to show a preview of your game)
0x0100: 4 bytes of color modifications
0x0104: con version
0x0105: code length
??????: 3 bits for framerate (0/1/2/4/8/16/32/64)
??????: CODE
??????: THEN FREE DATA SECTION (map/spr/sfx/mus/...)

# possible multiplayer functionality
when 2 handhelds connect via bluetooth for multiplayer (and in the vm when enabling split handheld multiplayer mode) here is a possible solution for how it works.

an area in game accessible memory of 64 or 128 bytes is synced between the devices every frame (30 frames per second). use this area to communicate with the other handheld. for transmission, some sort of checksum is there to ensure it transmitted successfully (maybe bluetooth takes care of that). 64 bytes is 512 bits, 512*30fps = ~2% of the average bluetooth connection transfer rate limit (1mbit per second)

and that's it. maybe instead of game accessible memory, it's just a function.

# unorganized thoughts
ziglua: https://github.com/natecraddock/ziglua
