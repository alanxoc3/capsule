#- the ax shell v0.2

it's been over a month. time for another update on the design for the ax shell.

Here are my previous iterations:
=> gemini://xoc3.io/blog/2022-03-20 ax v0.1
=> gemini://xoc3.io/blog/2022-05-01 ax v0.0

## overview
the ax shell (pronounced "acks") is an acronym for "[a]n e[x]treme [shell]". this shell strives to take the unix philosophy to the extreme. here are some of the highlights of the shell:

"straight forward syntax". the entire syntax should be reasonably easy to memorize. this is very unlike many unix shells currently available. for example, after years of using bash/zsh, i still don't know all the syntax rules. not to mention the massive man pages you have to go through to find what you want.

"text is the only datatype". having only one datatype simplifies the shell language and encourages the use of other command line programs. arrays are represented by splitting on the null character and booleans are represented with an empty/non-empty string. mathematical operations should be done through a program suited for math.

"executables extend functionality". the list of builtins is fixed and there is no support for aliases or functions, forcing you to create executables instead. while this may sound limiting at first, you'll be suprised at how it simplifies your shell experience and empowers your system as a whole.

the ax syntax is not meant to be as powerful or complex as modern programming languages. it's meant to be the glue that puts programs together by manipulating program arguments, environment variables, return codes, stdout, stdin, and stderr.

with that overview, let's get to the actual spec!

## commands and strings
like other shells, ax separates commands and arguments with spaces and strings are represented with quotes. each line in the following example produces equivalent output. this demonstrates commands, comments, argument separation, strings, statement separation, and pipes:

```
echo hello world
echo hello world # this part is a comment
  echo  hello  world  
echo (hello world)
echo (hello )world
echo (he)llo( )(wo)r(ld)
echo -n hello; echo ( world)
echo hello | awk ({print $1 " world"})
echo -n hello world! | tr ! \n
```

a few things to note from the above example:
* echo is not a shell builtin
* strings are represented with double or single quotes
* text between quotes is not evaluated in any way
* statement separation can be done with a new line or semicolon
* a backslash doesn't need to be quoted/escaped
* pipes are reversed compared to other shells

## the join operator
one can easily join arguments together with the "?" syntax. by default, the "?" syntax joins arguments with the null character between each one, but "?" also supports joining arguments with any string.

some examples with the output in the comment to the right:

```
? hello world         # prints: "hello\0world" (\0 meaning the null character)
? hello world | tr \0 # prints: "hello,world"
?, hello world        # prints: "hello,world"
?( ) hello world      # prints: "hello world"
(? ) hello world      # prints: "hello world"
?( . ) hello world    # prints: "hello . world"
```

one reason the join operator defaults to splitting with the null character is because of a unique property the null character has on unix systems. the null character is the only character that unix systems don't allow in environment variables, filenames, and command arguments. but the null character can of course be part of stdin and stdout.

## expansion operators
another reason the join operator defaults to splitting with the null character is to work with the expansion operators in ax. here are the three expansion operators:

* () - expands to 1 or more arguments. split on null character and unpack each item as a separate argument.
* {} - expands to 0 or more arguments. split on null character and unpack each item as a separate argument, removing all empty strings.

and here are examples with each one:

```
echo (hello )[? kitty world]         # prints: "hello kitty hello world"
echo (hello [? kitty world])         # prints: "hello kitty hello world"

echo [? () foo bar]bar               # prints: "bar foobar barbar"
mv some_file[? () .backup]           # expands to: mv some_file some_file.backup

# equivalent to "ls ./*/" in bash (find and fd):
ls {find -mindepth 1 -maxdepth 1 -type d -not -path (*/.*) -print0}
ls {fd --exact-depth 1 -0It d}

# equivalent to "ls */*" in bash:
ls {find -print0 -mindepth 2 -maxdepth 2 -not -path (*/.*)}
ls {fd -0I --exact-depth 2}
```

## strings
briefly mentioned earlier, "" or '' can be used to include text in a single argument. both "" and '' in ax behave in the same way as '' in bash. that is, there is no shell expansion or escape codes supported between the quotes.

use the "~" syntax in ax to create a string that allows any text besides a certain delimiter you specify within it. the "~" syntax is similar to heredocs in bash. example:

```
? ~EOF
this is a here doc
the delimiter is EOF followed by ~
EOF~

# prints the following with no trailing newline:
this is a here doc
the delimiter is EOF followed by ~
```


```
# these are equivalent:
? 'hello world' | tee file.txt;
? ~ hello world ~ | tee file.txt;
? ~// hello world //~ | tee file.txt;
? ~EOF
hello world
EOF~ | tee file.txt;

# for demonstration puposes, these are equivalent:
? ''
? ~ ~
? ~  ~

# and these are equivalent:
? ' '
? ~   ~
```

as shown in the example above, the text after the first "~" and before the whitespace character is the delimiter that is also used to end the string. the end delimiter must be the same as the start delimiter, but with a whitespace character before it and a "~" after.

## vars
in ax, a command prefixed with "$" is actually a local variable. commands prefixed with "%" are environment variables. variable commands ignore stdin. variables commands with no arguments simply return their value, with arguments their value is set with null in between each argument and printed to stdout. here are some examples:

```
# set the "FILE" variable, write to the file, and print the output
echo hello | tee ($FILE file.txt) | true
cat ($FILE)

# ls each directory in the path
ls {%PATH | tr : \0}

# cd into the user's "Downloads" directory
:cd (%HOME)/Downloads

# create a directory with an executable file, add the directory to the path, and run the new command
mkdir -p ($LOCALBIN (%HOME)/.local/bin)
? "#!/bin/ax" "echo it works!" | tr \0 \n | tee ($LOCALBIN)/testenv | true
chmod u+x ($LOCALBIN)/testenv
%PATH ($LOCALBIN):(%PATH)
testenv # prints: "it works!"

# $ and % themselves are also variables for the lazy:
$ hello
% world
?' ' ($) (%)
```

environment variables in the ax shell may contain the null character, but subprocesses will only get the text before the null character as a value. local and environment variables can be deleted by setting their value to the empty string:

```
# environment variables don't pass data after null to subprocess
%PATH /bin /usr/bin | tr \0 : # prints "/bin:/usr/bin"
env | grep '^PATH=' # prints "PATH=/bin"

# set empty string to env var for subprocess:
%envvar '' ''
env | grep '^envvar=' # prints "envvar="

# delete env var for subprocess:
%envvar ''
env | grep '^envvar=' # has no output

# applications often use environment variables to find config files.
# falling back to different environment variables is simple with ax.
# the following will print the first directory that has a non-empty environment variable:
cat (? {%APP_CONFIG_DIR}/config {%XDG_CONFIG_HOME}/app/config {%HOME}/.config/app/config /etc/app.conf)
```

## builtins
builtins are prefixed with a ":". each builtin has special properties unique to that builtin. starting with ":cd" and ":exit":

```
:cd /var/cache # absolute dir
:cd man # relative dir
:cd .. # back a dir
:cd . # do nothing
:cd # cd to %HOME

:exit # exits the shell with code "0"
:exit 0 # also exits with code "0"
:exit '' # also exits with code "0"
:exit blah # non-empty/invalid number has a code of 1
:exit 255 # 255 is the max return code allowed (0 is the min)
```

ax has a few builtins that work with pipes, namely ":err", ":ret", and ":nil":

```
# "cat -S" isn't valid, so it will print an error message.
# normally the error is ignored by the capture group,
# but ":err" says to merge stderr with stdout.
echo (cat -S | :err)

# ":nil" throws away stdout:
echo hello world | :nil

# we can get just stderr by combining ":nil" with ":err":
echo (cat -S | :nil | :err)

# :ret returns error codes from the previous command/pipeline in reverse order:
cat -S; :ret # prints "1"
cat -S | cat | cat; ?' ' [:ret] # prints "1 0 0"
```

and finally, there are a few control builtins: ":fork", ":loop", and ":if. these builtins have a special property of being able to conditionally parse captures:

```
# the stdout from file is duplicated and both the "tee" and "awk" commands are run in parallel.
# the pipeline won't stop until both the tee and awk commands are finished:
cat file | :fork ('tee /tmp/blah | :nil') (awk '{print "test: " $1}')

# :if and :loop parse an empty string as false and a non-empty string as true:
:if true (echo hello) # prints hello
:if (cat file.txt) (echo file is non-empty) (echo file is empty)

# here is an if elseif statement:
:if ($V1) (echo V1 is ($V1))
    ($V2) (echo V2 is ($V2))
          (echo both V1 and V2 are empty)

# loop forever, printing then sleeping
:loop 'forever :)' (echo looping; sleep 1s)

# in this example, the program will continuously sleep for 1 second at a time until the variable is set:
:loop (:if ($VAR) '' t) (sleep 1s); echo variable is finally set
```

## reference
here are all the special characters in the ax shell:

```
 #  -- rest of line is ignored
 ;  -- separates statements
' ' -- string between quotes
" " -- string between quotes
 |  -- pipes output between expressions
( ) -- capture stdout from expression
[ ] -- unpack arguments
 ?  -- prefix for joining
 $  -- prefix for local variables
 %  -- prefix for environment variables
 ~  -- string between ~XYZ ... XYZ~
```

here are all the builtins:

```
:cd   -- change directory
:exit -- exit shell
:err  -- stderr to stdout
:ret  -- get return codes of previous command
:nil  -- ignore stdout
:fork -- run commands in parallel and wait
:loop -- loop on condition
:if   -- conditionally execute statements
```

## conclusion
alright, i need to get on with my life again. i spent most of my friday and saturday working on this document. i'll probably come back to this in another month for v0.2.

some todos for v0.2:
* explain process handling ideas
* hook system (for shortcuts)
* rethink current "builtins"
* consider "exec" builtin
* add more examples
* explain .axrc
* commandline arguments
* add a "faq" section
